// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "default"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id               String             @id @default(uuid())
  projectId        String             @unique
  createdAt        DateTime           @default(now()) @db.Timestamp(0)
  updatedAt        DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  MessageEvents    MessageEvent[]
  MessageReccuring MessageReccuring[]
  MessageSchedule  MessageSchedule[]
}

model MessageReccuring {
  id                String            @id @default(uuid())
  title             String            @db.VarChar(100)
  content           Json
  deliveryCycle     String
  nextDeliveryAt    DateTime
  startDeliveryTerm DateTime?
  endDeliveryTerm   DateTime?
  createdAt         DateTime          @default(now()) @db.Timestamp(0)
  updatedAt         DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  account           Account           @relation(fields: [projectId], references: [projectId])
  projectId         String
  messageSchedules  MessageSchedule[]
}

model MessageSchedule {
  id                 String            @id @default(uuid())
  title              String            @db.VarChar(100)
  content            Json
  deliveryScheduleAt DateTime
  createdAt          DateTime          @default(now()) @db.Timestamp(0)
  updatedAt          DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  status             String            @default("draft")
  account            Account           @relation(fields: [projectId], references: [projectId])
  projectId          String
  messageReccuring   MessageReccuring? @relation(fields: [messageReccuringId], references: [id])
  messageReccuringId String?
  messageEvent       MessageEvent?
}

model MessageEvent {
  id                String             @id @default(uuid())
  title             String             @db.VarChar(100) // todo メッセージイベントの記述変更後に削除
  segmentId         String?            @db.VarChar(100)
  segmentTitle      String?            @db.VarChar(100)
  content           Json // todo MessageScheduleにコンテンツを移行後に削除
  createdAt         DateTime           @default(now()) @db.Timestamp(0)
  updatedAt         DateTime           @default(now()) @updatedAt @db.Timestamp(0)
  account           Account            @relation(fields: [projectId], references: [projectId])
  projectId         String
  userMessageEvents UserMessageEvent[]
  MessageSchedule   MessageSchedule    @relation(fields: [messageScheduleId], references: [id])
  messageScheduleId String             @unique
}

model UserMessageEvent {
  id               String            @id @default(uuid())
  lineId           String
  name             String?
  userId           String?
  userNumber       String?
  email            String?           @db.VarChar(256)
  readAt           DateTime?         @db.Timestamp(0)
  status           String?           @default("success") // success, failure
  createdAt        DateTime          @default(now()) @db.Timestamp(0)
  updatedAt        DateTime          @default(now()) @updatedAt @db.Timestamp(0)
  messageEvent     MessageEvent      @relation(fields: [messageEventId], references: [id])
  messageEventId   String
  userMessageLinks UserMessageLink[]
}

model UserMessageLink {
  id                        String                    @id @default(uuid())
  originalLink              String                    @db.Text
  createdAt                 DateTime                  @default(now()) @db.Timestamp(0)
  updatedAt                 DateTime                  @default(now()) @updatedAt @db.Timestamp(0)
  userMessageEvent          UserMessageEvent          @relation(fields: [userMessageEventId], references: [id])
  userMessageEventId        String
  UserMessageLinkActivities UserMessageLinkActivity[]
}

model UserMessageLinkActivity {
  id                String          @id @default(uuid())
  type              String          @db.VarChar(50)
  content           Json?
  orderId           String?
  orderNumber       String?
  orderTotal        Int?            @default(0)
  createdAt         DateTime        @default(now()) @db.Timestamp(0)
  updatedAt         DateTime        @default(now()) @updatedAt @db.Timestamp(0)
  userMessageLink   UserMessageLink @relation(fields: [userMessageLinkId], references: [id])
  userMessageLinkId String
}
