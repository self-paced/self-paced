// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

type Account struct {
	ID           int            `json:"id"`
	Number       string         `json:"number"`
	Company      string         `json:"company"`
	Name         string         `json:"name"`
	Status       bool           `json:"status"`
	AccountUsers []*AccountUser `json:"accountUsers"`
	AccountMeta  []*AccountMeta `json:"accountMeta"`
}

type AccountMeta struct {
	ID        int      `json:"id"`
	AccountID int      `json:"accountId"`
	Key       string   `json:"key"`
	Value     string   `json:"value"`
	Account   *Account `json:"account"`
}

type AccountUser struct {
	ID        int      `json:"id"`
	Number    string   `json:"number"`
	Name      string   `json:"name"`
	Email     string   `json:"email"`
	Password  string   `json:"password"`
	Status    bool     `json:"status"`
	AccountID int      `json:"accountId"`
	Account   *Account `json:"account"`
}

type DeleteAccountUser struct {
	ID        int `json:"id"`
	AccountID int `json:"accountId"`
}

type EditAccount struct {
	Number  string `json:"number"`
	Company string `json:"company"`
	Name    string `json:"name"`
	Status  bool   `json:"status"`
}

type EditAccountMeta struct {
	ID        int    `json:"id"`
	AccountID int    `json:"accountId"`
	Value     string `json:"value"`
}

type EditAccountUser struct {
	ID       int    `json:"id"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Filter struct {
	ObjectDifinitionID int     `json:"objectDifinitionId"`
	Operator           string  `json:"operator"`
	Value              string  `json:"value"`
	Connector          *string `json:"connector"`
}

type Group struct {
	ObjectDifinitionID int `json:"objectDifinitionId"`
}

type NewAccount struct {
	Company string `json:"company"`
	Name    string `json:"name"`
}

type NewAccountMeta struct {
	Key       string `json:"key"`
	Value     string `json:"value"`
	AccountID int    `json:"accountId"`
}

type NewAccountUser struct {
	Name      string `json:"name"`
	Email     string `json:"email"`
	Password  string `json:"password"`
	AccountID int    `json:"accountId"`
}

type NewReport struct {
	Title       string  `json:"title"`
	Description *string `json:"description"`
}

type Object struct {
	ID            int    `json:"id"`
	AccountID     int    `json:"accountID"`
	Number        string `json:"number"`
	AccountUserID int    `json:"accountUserId"`
	ObjectTypeID  int    `json:"objectTypeId"`
	Title         string `json:"title"`
	RecordCount   int    `json:"recordCount"`
	Size          int    `json:"size"`
	CreatedAt     string `json:"createdAt"`
	UpdatedAt     string `json:"updatedAt"`
}

type ObjectDifinition struct {
	ID         int     `json:"id"`
	AccountID  int     `json:"accountID"`
	ObjectID   int     `json:"objectID"`
	Title      string  `json:"title"`
	Name       string  `json:"name"`
	ColumnType *string `json:"columnType"`
	PrimaryFlg *bool   `json:"primaryFlg"`
}

type ObjectType struct {
	ID          int     `json:"id"`
	AccountID   int     `json:"accountId"`
	Title       string  `json:"title"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

type ReportColQuery struct {
	ID                 *int `json:"id"`
	ReportID           int  `json:"reportId"`
	ObjectDifinitionID int  `json:"objectDifinitionId"`
}

type ReportRowQuery struct {
	ID                 *int `json:"id"`
	ReportID           int  `json:"reportId"`
	ObjectDifinitionID int  `json:"objectDifinitionId"`
}

type ReportWhereQuery struct {
	ID           *int `json:"id"`
	ReportID     int  `json:"reportId"`
	WhereQueryID int  `json:"whereQueryId"`
}

type ShopOrder struct {
	ShopID  *string `json:"shopId"`
	Times   *int    `json:"times"`
	OrderID *int    `json:"orderId"`
}

type ShopOrderData struct {
	Ecforce interface{} `json:"ecforce"`
}

type ShopOrders struct {
	ShopOrders []*ShopOrder `json:"shopOrders"`
}

type WhereQuery struct {
	ID                 *int    `json:"id"`
	AccountID          int     `json:"accountId"`
	ObjectDifinitionID int     `json:"objectDifinitionId"`
	Operator           string  `json:"operator"`
	Value              string  `json:"value"`
	Connector          *string `json:"connector"`
}
