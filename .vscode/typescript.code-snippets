{
  "entity": {
    "scope": "typescript",
    "prefix": "entity",
    "body": [
      "import { Field, ID, ObjectType } from 'type-graphql';",
      "import {",
      "\tEntity,",
      "\tPrimaryGeneratedColumn,",
      "\tColumn,",
      "\tBaseEntity,",
      "\tCreateDateColumn,",
      "\tDeleteDateColumn,",
      "\tUpdateDateColumn,",
      "} from 'typeorm';",
      "",
      "@ObjectType()",
      "@Entity()",
      "export class ${TM_FILENAME_BASE} extends BaseEntity {",
      "\t@Field(() => ID)",
      "\t@PrimaryGeneratedColumn()",
      "\tid!: number;",
      "",
      "\t@Field()",
      "\t@Column()",
      "\t${1:someColumn}!: string;",
      "",
      "\t@Field()",
      "\t@CreateDateColumn()",
      "\tcreatedAt!: Date;",
      "",
      "\t@Field()",
      "\t@UpdateDateColumn()",
      "\tupdatedAt!: Date;",
      "",
      "\t@Field({ nullable: true })",
      "\t@DeleteDateColumn()",
      "\tdeletedAt!: Date;",
      "}",
      ""
    ],
    "description": "Create a TypeORM/TypeGraphQL Entity"
  },
  "resolver": {
    "scope": "typescript",
    "prefix": "resolver",
    "body": [
      "import { Arg, Mutation, Query, Resolver } from 'type-graphql';",
      "import { ${1:Something} } from '../../db/entity/${1:Something}';",
      "import Create${1:Something}Input from '../models/${2:something}/Create${1:Something}Input';",
      "import Edit${1:Something}Input from '../models/${2:something}/Edit${1:Something}Input';",
      "",
      "@Resolver()",
      "export default class ${TM_FILENAME_BASE} {",
      "\t@Query(() => [${1:Something}])",
      "\tasync list${3:Something}s(): Promise<${1:Something}[]> {",
      "\t\treturn await ${1:Something}.find();",
      "\t}",
      "",
      "\t@Query(() => ${1:Something}, { nullable: true })",
      "\tasync get${1:Something}(@Arg('id') id: number): Promise<${1:Something} | null> {",
      "\t\treturn await ${1:Something}.findOneBy({ id });",
      "\t}",
      "",
      "\t@Mutation(() => ${1:Something})",
      "\tasync create${1:Something}(",
      "\t\t@Arg('input') input: Create${1:Something}Input",
      "\t): Promise<${1:Something}> {",
      "\t\tconst ${2:something}: ${1:Something} = await ${1:Something}.create({ ...input }).save();",
      "\t\treturn ${2:something};",
      "\t}",
      "",
      "\t@Mutation(() => ${1:Something})",
      "\tasync edit${1:Something}(",
      "\t\t@Arg('input') input: Edit${1:Something}Input",
      "\t): Promise<${1:Something}> {",
      "\t\tconst ${2:something}: ${1:Something} = await ${1:Something}.create({ ...input }).save();",
      "\t\treturn ${2:something};",
      "\t}",
      "",
      "\t@Mutation(() => ${1:Something})",
      "\tasync delete${1:Something}(@Arg('id') id: number): Promise<${1:Something}> {",
      "\t\tconst ${2:something}: ${1:Something} = await ${1:Something}.create({ id }).remove();",
      "\t\treturn ${2:something};",
      "\t}",
      "}",
      ""
    ],
    "description": "Create a TypeGraphQL Resolver"
  }
}
