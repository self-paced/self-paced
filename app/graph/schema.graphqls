# GraphQL schema example
#
# https://gqlgen.com/getting-started/
scalar Map
scalar Any

type Account {
  id: Int!
  number: String!
  company: String!
  name: String!
  status: Boolean!
  account_users: [AccountUser!]!
  account_meta: [AccountMeta!]!
}

type AccountUser {
  id: Int!
  number: String!
  name: String!
  email: String!
  password: String!
  status: Boolean!
  accountID: Int!
  account: Account!
}

type AccountMeta {
  id: Int!
  accountID: Int!
  key: String!
  value: String!
  account: Account!
}

type ObjectType {
  id: Int!
  accountID: Int!
  title: String!
  description: String
  name: String!
}

type ShopOrderData {
  ecforce: Any!
}

type ShopOrders {
  shopOrders: [ShopOrder!]!
}

type ShopOrder {
  shopId: String
  times: Int
  orderId: Int
}

type ShopOrderTmp {
  ecforce: Any!
}

type Object {
  id: Int!
  accountID: Int!
  number: String!
  accountUserId: Int!
  objectTypeId: Int!

  title: String!
  recordCount: Int!
  size: Int!
  createdAt: String!
  updatedAt: String!
}

type ObjectDifinition {
  id: Int!
  accountID: Int!
  objectID: Int!
  title: String!
  name: String!
  columnType: String
  primaryFlg: Boolean
}

type Query {
  accounts: [Account!]!
  account(id: String!): Account!
  account_users: [AccountUser!]!
  account_user(id: String!): AccountUser!

  # objects
  getObjectTypes(accountId: Int!, id: Int!): [ObjectType!]!
  getObjectType(accountId: Int!): ObjectType!

  getObjects(accountId: Int!): [Object!]!
  getObject(accountId: Int!, number: String!, first: Int = 100, after: ID): ShopOrderData!

  getObjectTmp: ShopOrderTmp!
  # test
  test: Object!
}


## mutation

# account 
input NewAccount {
  company: String!
  name: String!
}

input EditAccount {
  number: String!
  company: String!
  name: String!
  status: Boolean!
}

# account user
input NewAccountUser {
  name: String!
  email: String!
  password: String!
  accountId: Int!
}

input EditAccountUser {
  id: Int!
  email: String!
  password: String!
}

input DeleteAccountUser {
  id: Int!
  accountId: Int!
}

# account meta
input NewAccountMeta {
  key: String!
  value: String!
  accountId: Int!
}

input EditAccountMeta {
  id: Int!
  accountId: Int!
  value: String!
}

type Mutation {

  # account
  createAccount(input: NewAccount!): Account!
  updateAccount(input: EditAccount!): Account!

  # account user
  createAccountUser(input: NewAccountUser!): AccountUser!
  updateAccountUser(input: EditAccountUser!): AccountUser!
  deleteAccountUser(input: DeleteAccountUser!): AccountUser!

  # account meta
  createAccountMeta(input: NewAccountMeta!): AccountMeta!
  udpateAccountMeta(input: EditAccountMeta!): AccountMeta!
  
}
